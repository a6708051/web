-- MySQL dump 10.13  Distrib 5.6.36, for Linux (x86_64)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	5.6.36-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `blog_article`
--

DROP TABLE IF EXISTS `blog_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_article` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `adate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `title` varchar(200) COLLATE utf8_unicode_ci NOT NULL COMMENT '标题',
  `content` text COLLATE utf8_unicode_ci NOT NULL COMMENT '内容',
  `browsing_number` int(10) NOT NULL DEFAULT '0' COMMENT '浏览数',
  `comment_number` int(10) NOT NULL DEFAULT '0' COMMENT '评论数',
  `cat_id` int(10) NOT NULL COMMENT '文章分类',
  `release_day` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '发布时间',
  `create_user` int(10) NOT NULL COMMENT '创建人',
  `open_id` int(10) NOT NULL COMMENT 'open_id',
  `sort_id` int(10) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态:-1=>删除;0=>待审核;1=>正常',
  PRIMARY KEY (`id`),
  KEY `type` (`cat_id`),
  KEY `open_id` (`open_id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_article`
--

LOCK TABLES `blog_article` WRITE;
/*!40000 ALTER TABLE `blog_article` DISABLE KEYS */;
INSERT INTO `blog_article` VALUES (2,'2016-01-11 15:43:24','test','&lt;p&gt;test&lt;img src=&quot;http://img.baidu.com/hi/jx2/j_0038.gif&quot;/&gt;&amp;nbsp;&lt;/p&gt;',0,0,1,'2016-01-15 00:00:00',1,0,0,-1),(3,'2016-01-19 07:05:23','取反运算符(~)','&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160119/1453187011992814.png&quot; title=&quot;1453187011992814.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;8的二进制为：1000&lt;/p&gt;&lt;p&gt;那他的取反(~)结果是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160119/1453187032813157.png&quot; title=&quot;1453187032813157.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;由其可知其结果是一个负数，其计算的方式为：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(17, 17, 17); font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 21px; white-space: pre-wrap; widows: 1; background-color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从右至左找到第一个1，然后逆转其左侧的所有位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(17, 17, 17); font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 21px; white-space: pre-wrap; widows: 1; background-color: rgb(255, 255, 255);&quot;&gt;可得结果为 (-) 1001，结果即为 -9&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-01-19 00:00:00',1,0,0,-1),(4,'2016-01-19 08:15:59','取反运算符(~)','&lt;p&gt;10进制数8取反的结果：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160119/1453187011992814.png&quot; title=&quot;1453187011992814.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;8的二进制为：1000&lt;/p&gt;&lt;p&gt;那他的取反(~)结果是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160119/1453187032813157.png&quot; title=&quot;1453187032813157.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;由其可知其结果是一个负数，其计算的方式为：&lt;span style=&quot;color: rgb(17, 17, 17); font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 21px; white-space: pre-wrap; background-color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(17, 17, 17); font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 21px; white-space: pre-wrap; widows: 1; background-color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 8的二进制取反结果是一个整型负数的补码(如上图)，对该补码进行减一取反得到的是(-)1001，即-9。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2017-01-11 00:00:00',1,0,0,1),(5,'2016-01-19 08:21:10','取反运算符(~)','&lt;p&gt;aaaaccc&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160119/1453187011992814.png&quot; title=&quot;1453187011992814.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;8的二进制为：1000&lt;/p&gt;&lt;p&gt;那他的取反(~)结果是&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160119/1453187032813157.png&quot; title=&quot;1453187032813157.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;由其可知其结果是一个负数，其计算的方式为：&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(17, 17, 17); font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 21px; white-space: pre-wrap; widows: 1; background-color: rgb(255, 255, 255);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从右至左找到第一个1，然后逆转其左侧的所有位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(17, 17, 17); font-family: Arial, Helvetica, sans-serif; font-size: 13px; line-height: 21px; white-space: pre-wrap; widows: 1; background-color: rgb(255, 255, 255);&quot;&gt;可得结果为 (-) 1001，结果即为 -9&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-01-19 00:00:00',1,0,0,-1),(6,'2016-01-19 09:22:56','php简单实现一致性hash','&lt;p&gt;&amp;lt;?php&lt;br/&gt;class hash_handle{&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; function hash_md5($str) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $result = empty($str) ? null : md5($str);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return $result;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;}&lt;br/&gt;class consis_hash{&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private $_long = 10;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private $_item = array();&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private $_host = array();&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private $_hash;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private $_sort = false;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public function __construct() {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $this-&amp;gt;_hash = new hash_handle();&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public function add($host_ip) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (empty($host_ip)) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $hash_host = $this-&amp;gt;_hash-&amp;gt;hash_md5($host_ip);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ($i=0; $i&amp;lt;$this-&amp;gt;_long; $i++) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $hash_i = $this-&amp;gt;_hash-&amp;gt;hash_md5($host_ip.&amp;#39;_&amp;#39;.$i);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $this-&amp;gt;_host[$hash_host][] = $hash_i;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $this-&amp;gt;_item[$hash_i] = $host_ip;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $this-&amp;gt;_sort = false;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public function del($host_ip) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (empty($host_ip)) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $hash_host = $this-&amp;gt;_hash-&amp;gt;hash_md5($host_ip);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (isset($this-&amp;gt;_host[$hash_host])) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; foreach ($this-&amp;gt;_host[$hash_host] as $key=&amp;gt;$value) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; unset($this-&amp;gt;_item[$value]);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; unset($this-&amp;gt;_host[$hash_host]);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public function find($str) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (empty($str)) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ($this-&amp;gt;_sort == false) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $this-&amp;gt;sort_item();&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $hash_str = $this-&amp;gt;_hash-&amp;gt;hash_md5($str);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; foreach ($this-&amp;gt;_item as $key=&amp;gt;$value) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ($hash_str &amp;lt; $key) {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //echo $hash_str.&amp;#39;=======&amp;gt;&amp;#39;.$key;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return $value;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public function show() {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //var_dump($this-&amp;gt;_host);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var_dump($this-&amp;gt;_item);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private function sort_item() {&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ksort($this-&amp;gt;_item);&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $this-&amp;gt;_sort = true;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;}&lt;br/&gt;$obj = new consis_hash();&lt;br/&gt;$obj-&amp;gt;add(&amp;#39;192.168.1.211&amp;#39;);&lt;br/&gt;$obj-&amp;gt;add(&amp;#39;192.168.1.112&amp;#39;);&lt;br/&gt;$obj-&amp;gt;add(&amp;#39;192.168.1.121&amp;#39;);&lt;br/&gt;&lt;br/&gt;var_dump($obj-&amp;gt;find(&amp;#39;kary&amp;#39;));&lt;br/&gt;//$obj-&amp;gt;show();&lt;br/&gt;var_dump($obj-&amp;gt;find(&amp;#39;123&amp;#39;));&lt;br/&gt;var_dump($obj-&amp;gt;find(&amp;#39;789&amp;#39;));&lt;br/&gt;var_dump($obj-&amp;gt;find(&amp;#39;test&amp;#39;));&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-01-19 00:00:00',1,0,0,1),(7,'2016-01-19 09:28:27','mysql导入导出数据','&lt;p&gt;帮一个朋友导下数据，为了以后省事，顺便整理下步骤给他。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;&quot;&gt;导出数据库：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;mysqldump -u user(用户名) -p database(数据库名) &amp;gt; /database.sql&lt;/p&gt;&lt;p&gt;导入数据库：&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;mysql -u user(用户名)&amp;nbsp;&amp;nbsp;-p 先进入数据库&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;use database(数据库名)（如还没建立，则先创建再进入）&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;source database.sql&lt;/p&gt;&lt;p&gt;如涉及到跨服务器，可使用rsync命令传文件（如未安装rsync需执行 yum install rsync 进行安装）&lt;/p&gt;&lt;p&gt;rsync -avP --progress /database.sql &amp;nbsp;user@host:/database.sql&lt;/p&gt;&lt;p&gt;ps:操作完记得执行 rm database.sql 删除文件&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-01-19 00:00:00',1,0,0,1),(8,'2016-01-21 14:22:18','sphinx对多个标签过滤','&lt;p&gt;在sphinx.conf文件中设置&lt;/p&gt;&lt;p&gt;sql_attr_multi &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = uint messageType from field;&lt;/p&gt;&lt;p&gt;sql_attr_multi &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; = uint channelId from field;&lt;/p&gt;&lt;p&gt;当然，messageType&amp;nbsp;和channelId&amp;nbsp;是sql_query中查询的字段&lt;/p&gt;&lt;p&gt;在php中可使用SetFilter方法过滤&lt;/p&gt;&lt;p&gt;/*$client = new SphinxClient();*/&lt;/p&gt;&lt;p&gt;$client-&amp;gt;SetFilter(&amp;#39;messageType&amp;#39;, array(10)); &amp;nbsp; //搜索messageType为10的数据 &amp;nbsp;&lt;/p&gt;&lt;p&gt;$client-&amp;gt;SetFilter(&amp;#39;channelId&amp;#39;, array(130, 131)); &amp;nbsp; &amp;nbsp; //搜索channelId为130或131的数据&lt;/p&gt;&lt;p&gt;也可使用SetFilterRange搜索范围内的数据&lt;/p&gt;&lt;p&gt;$client-&amp;gt;SetFilterRange(&amp;#39;channelId&amp;#39;, 130, 140); &amp;nbsp; &amp;nbsp; //搜索channelId在130-140范围内的数据&lt;/p&gt;&lt;p&gt;但在使用多值属性的过程中，可能出现mva内存不够的情况，&lt;/p&gt;&lt;p&gt;需要在配置文件中设置&lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;, sans-serif; font-size: 12px; line-height: 18px; white-space: pre-wrap; widows: 1; background-color: rgb(245, 245, 245);&quot;&gt;mva_updates_pool值&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160121/1453386243596305.png&quot; title=&quot;1453386243596305.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;该值默认为1M，需根据实际情况适当增大&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-01-21 00:00:00',1,0,0,1),(9,'2016-01-25 09:17:40','UNIX Domain Socket','&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: 16px;&quot;&gt;今天看到一篇技术文章，说php-fpm(FastCGI)和nginx的通信方式有两种，一种是tcp的方式，一种是unix socket的方式；在效率方面来说是unix socket更快，而在并发处理方面tcp更好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;之前有了解过&lt;span style=&quot;font-size: medium; font-family: Tahoma; orphans: 2; widows: 2;&quot;&gt;socket&lt;/span&gt;，它是API，可指定使用传输层协议tcp或udp等。那它又怎么会比tcp快呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;查了些资料，发现&lt;span style=&quot;font-size: medium; font-family: Tahoma; orphans: 2; widows: 2;&quot;&gt;unix socket&lt;/span&gt;和前面了解到的socket是不一样的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;UNIX Domain Socket是在&lt;span style=&quot;font-size: medium; font-family: Tahoma; orphans: 2; widows: 2;&quot;&gt;socket&lt;/span&gt;架构上发展起来的用于同一台主机的&lt;strong&gt;进程间通讯（IPC）&lt;/strong&gt;，它不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是&lt;strong&gt;将应用层数据从一个进程拷贝到另一个进程&lt;/strong&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;UNIX Domain Socket有SOCK_DGRAM或SOCK_STREAM两种工作模式，类似于UDP和TCP；&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2; font-size: medium; margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;sock_stream 是有保障的（即能保证数据正确传送到对方）面向连接的SOCKET，多用于资料（如文件）传送。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;sock_dgram 是无保障的面向消息的socket，主要用于在网络上发广播信息。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-01-25 00:00:00',1,0,0,1),(10,'2016-01-27 09:47:22','一个简单的hashTable实现','&lt;p&gt;php内核最重要的一块便是hashTable，尝试用c做一个简单的实现：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/p&gt;&lt;p&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/p&gt;&lt;p&gt;#include &amp;lt;string.h&amp;gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;#define HASH_TABLE_INIT_SIZE 128&lt;/p&gt;&lt;p&gt;#define HASH_INDEX(key) _hash_index(key)%ht-&amp;gt;size&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;typedef struct _Bucket {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;char *key;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;void *value;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;struct _Bucket *next;&lt;/p&gt;&lt;p&gt;} Bucket;&lt;/p&gt;&lt;p&gt;typedef struct _HashTable {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; int size;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; int nums;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; Bucket **buckets;&lt;/p&gt;&lt;p&gt;} HashTable;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;void _hash_need_resize(HashTable *ht);&lt;/p&gt;&lt;p&gt;unsigned _hash_index(char *key);&lt;/p&gt;&lt;p&gt;int _hash_expansion(HashTable *ht);&lt;/p&gt;&lt;p&gt;int _hash_init(HashTable *ht);&lt;/p&gt;&lt;p&gt;int _hash_insert(HashTable *ht, char *key, void *value);&lt;/p&gt;&lt;p&gt;int _hash_search(HashTable *ht, char *key, void **result);&lt;/p&gt;&lt;p&gt;int _hash_delete(HashTable *ht, char *key);&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;int main() {&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;HashTable *ht = (HashTable *)malloc(sizeof(HashTable *));&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;_hash_init(ht);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;char *key = &amp;quot;test_key_1&amp;quot;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;char *value = &amp;quot;test_value_1&amp;quot;;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;_hash_insert(ht, key, value);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;void *result;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;_hash_search(ht, key, &amp;amp;result);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;printf(&amp;quot;this is %s\\n&amp;quot;, result);&lt;/p&gt;&lt;p&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space:pre&quot;&gt;&lt;/span&gt;return 1;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;void _hash_need_resize(HashTable *ht) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; if (ht-&amp;gt;size - ht-&amp;gt;nums &amp;lt; 1) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; _hash_expansion(ht);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;unsigned _hash_index(char *key) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; unsigned long hash = 5381;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; char *cur = key;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; while (*cur != &amp;#39;\\0&amp;#39;) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; hash = ((hash &amp;lt;&amp;lt; 5) + hash) + *cur++;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return hash;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;int _hash_expansion(HashTable *ht) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; int tmp_size = ht-&amp;gt;size;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;size = tmp_size * 2;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;nums = 0;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; Bucket **tmp_buckets = ht-&amp;gt;buckets;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;buckets = (Bucket **)calloc(ht-&amp;gt;size, sizeof(Bucket *));&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; int i = 0;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; for (i=0; i&amp;lt;tmp_size; i++) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Bucket *tmp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Bucket *cur = tmp_buckets[i];&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; while (cur) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; _hash_insert(ht, cur-&amp;gt;key, cur-&amp;gt;value);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp = cur;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; cur = cur-&amp;gt;next;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; free(tmp);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp = NULL;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; free(tmp_buckets);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;int _hash_init(HashTable *ht) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;size = HASH_TABLE_INIT_SIZE;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;nums = 0;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;buckets = (Bucket **)calloc(ht-&amp;gt;size, sizeof(Bucket *));&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; if (ht-&amp;gt;buckets == NULL) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 0;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;int _hash_insert(HashTable *ht, char *key, void *value) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; _hash_need_resize(ht);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; unsigned long index = HASH_INDEX(key);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; Bucket *old_bucket = ht-&amp;gt;buckets[index];&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; Bucket *tmp_bucket = old_bucket;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; while (tmp_bucket) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (strcmp(key, tmp_bucket-&amp;gt;key) == 0) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp_bucket-&amp;gt;value = value;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp_bucket = tmp_bucket-&amp;gt;next;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; Bucket *bucket = (Bucket *)malloc(sizeof(Bucket *));&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; bucket-&amp;gt;key = key;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; bucket-&amp;gt;value = value;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; bucket-&amp;gt;next = NULL;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; if (old_bucket != NULL) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; bucket-&amp;gt;next = old_bucket;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;buckets[index] = bucket;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; ht-&amp;gt;nums++;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;int _hash_search(HashTable *ht, char *key, void **result) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; unsigned long index = HASH_INDEX(key);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; Bucket *tmp_bucket = ht-&amp;gt;buckets[index];&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; if (tmp_bucket == NULL) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; goto failed;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; while (tmp_bucket) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (strcmp(key, tmp_bucket-&amp;gt;key) == 0) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; *result = tmp_bucket-&amp;gt;value;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp_bucket = tmp_bucket-&amp;gt;next;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;failed:&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;int _hash_delete(HashTable *ht, char *key) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; unsigned long index = HASH_INDEX(key);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; Bucket *tmp_bucket = ht-&amp;gt;buckets[index];&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; if (tmp_bucket == NULL) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; goto failed;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; if (strcmp(key, tmp_bucket-&amp;gt;key) == 0) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (tmp_bucket-&amp;gt;next != NULL) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Bucket *next_bucket = tmp_bucket-&amp;gt;next;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ht-&amp;gt;buckets[index] = next_bucket;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; free(tmp_bucket);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp_bucket = NULL;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; } else {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; free(tmp_bucket);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp_bucket = NULL;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; while (tmp_bucket-&amp;gt;next != NULL) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Bucket *next_bucket = tmp_bucket-&amp;gt;next;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if (strcmp(key, next_bucket-&amp;gt;key) == 0) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp_bucket-&amp;gt;next = tmp_bucket-&amp;gt;next-&amp;gt;next;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; free(next_bucket);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; next_bucket = NULL;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; tmp_bucket = tmp_bucket-&amp;gt;next;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;failed:&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return 0;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-02-02 00:00:00',1,0,0,1),(11,'2016-02-17 04:10:49','(个人)生僻的sql关键字/函数','&lt;p&gt;&lt;strong style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2; font-size: medium;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;DISTINCT&lt;/span&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;关键字进行去重&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;br style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select distinct company from cutomers;会过滤掉cutomers表中重复的&lt;/span&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;company字段&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;TOP关键字取前n条数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select top 3 * from cutomers;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;等价于&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: large; line-height: 18px;&quot;&gt;select * from cutomers&lt;/span&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;line-height: 18px; font-size: large;&quot;&gt;limit 3;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px; font-size: large;&quot;&gt;等价于Oracle中的&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size: large; line-height: 18px;&quot;&gt;select * from cutomers where rownum&lt;/span&gt;&lt;span style=&quot;line-height: 18px; font-size: large;&quot;&gt;&amp;lt;=3;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;通配符（必须与like一起使用）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160217/1455689947693940.png&quot; title=&quot;1455689947693940.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;FULL JOIN关键字&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;full join会将关联的两个表的所有数据都显示出来（不管有没有匹配上），没有匹配上的字段则为null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;UNION和UNION ALL语法&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;他们都是用于合并两个或多个sql的结果集&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;区别：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;union合并结果集时，如果搜索&lt;/span&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;结果完全一样（两/多行所有的字段都一样），它们当中只有一条会被显示出来&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;union all则会显示所有的数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;SELECT INTO语句&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;从一个表中选取数据，然后把数据插入另一个表中&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select * into&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;line-height: 18px; font-size: large;&quot;&gt;&amp;nbsp;persons_backup from&lt;/span&gt;&lt;span style=&quot;line-height: 18px; font-size: large;&quot;&gt;&amp;nbsp;persons;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;等价于 insert into persons_backup select * from persons;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;ISNULL、IFNULL、NULLIF&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;isnull(arg) 判断数据arg是否为null，如:&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2; font-size: medium; margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select isnull(1+1); &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; 0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select isnull(1/0); &amp;nbsp; &amp;nbsp; &amp;nbsp;=&amp;gt; &amp;nbsp; &amp;nbsp; 1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select isnull(null); &amp;nbsp; &amp;nbsp; &amp;nbsp;=&amp;gt; &amp;nbsp; &amp;nbsp; 1&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;ifnull(arg1, arg2) 如果arg1为null则返回arg2，否则返回arg1&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2; font-size: medium; margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select ifnull(2, 5); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; 2&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select ifnull(1/0, &amp;#39;a&amp;#39;); &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; a&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select ifnull(null, 4) &amp;nbsp; &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; 4&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;nullif&lt;/span&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;(arg1, arg2) 如果arg1=arg2则返回null，否则返回arg1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select nullif(2, 2) &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; NULL&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select nullif(2, 4) &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; 2&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px; font-size: large;&quot;&gt;&lt;strong&gt;coalesce&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;coalesce函数表示可以返回参数中的第一个非空表达式，当你有N个参数时选取第一个非空值（从左到右）&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select coalesce(null,&amp;quot;carrot&amp;quot;,&amp;quot;apple&amp;quot;); &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; carrot&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;UCASE和LCASE&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;ucase将字段的值转换为大写&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;lcase将字段的值转换为小写&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;DATE_FORMAT函数&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;date_format对字段进行格式化&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 16px; line-height: 18px;&quot;&gt;select date_format(now(), &amp;#39;&lt;/span&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;%m-%d-%Y&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 16px; line-height: 18px;&quot;&gt;&amp;#39;); &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;11-26-2015&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;strong&gt;LOCATE函数&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;locate(arg1, arg2)用于arg1在arg2中出现的位置&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;select locate(&amp;#39;a&amp;#39;, &amp;#39;cbad&amp;#39;); &amp;nbsp; &amp;nbsp; =&amp;gt; &amp;nbsp; &amp;nbsp; 3&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;line-height: 18px;&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-02-17 00:00:00',1,0,0,1),(12,'2016-02-25 09:20:31','JS跨域学习','&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;&quot;&gt;浏览器为了数据安全，设置了同源策略(&lt;/span&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=SRI5FmrwFjf2Iwy-rtnCodedyhSiQkg98R9L2epfpLZmP7-omo0oNhrP-M52hrhG4QvdBLOQFOS2JeCVuBTZX_&quot; style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2; font-size: 14px; text-decoration: none;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;http://baike.baidu.com/link?url=SRI5FmrwFjf2Iwy-rtnCodedyhSiQkg98R9L2epfpLZmP7-omo0oNhrP-M52hrhG4QvdBLOQFOS2JeCVuBTZX_&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;&quot;&gt;)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;为什么要有这个呢？如果用户访问了A网站，并在本地缓存了许多数据(cookie等)，然后跨域访问B网站，这样B网站就能获取到用户在A网站缓存的许多数据了。&lt;br/&gt;&lt;/p&gt;&lt;p&gt;虽然这样数据更安全了，但也增加了很多麻烦，于是便有了JS跨域。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;常见的解决方式有&lt;/p&gt;&lt;p&gt;&lt;strong&gt;document.domain&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;不同子域名之间的跨域可通过设置document.domain为其主(父)域名来实现 (设置document.domain只能设置为其自身或其更好一级的父域)，这样其实不算真正意义上的跨域，只是通过设置，将他们的域提高了一级。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;jsonp&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;浏览器限制了对其他域数据的访问，但没有限制对其他域上js文件的引入，jsonp便是利用了这点，其本质是通过回调函数解决。&lt;/p&gt;&lt;p&gt;eg:&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;A网站的客户端写好回到函数callback，再加上js引入&amp;lt;script src=&amp;quot;http://b.com/data.php?param=callback&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;B网站的服务端获取参数param的只callback，并加上参数输出 ($callback=$_GET[&amp;#39;param&amp;#39;];$data=array(&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;);echo $callback.&amp;#39;(&amp;#39;.json_encode($data).&amp;#39;)&amp;#39;;)&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;这样一来，在A网站上的script引入得到的就是一段可执行的js，并实现了跨域。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;跨域资源共享 Cross-Origin Resource Sharing（CORS）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;跨域访问时：&lt;/p&gt;&lt;p&gt;客户端会在 Request Header 中加上origin(来源)&lt;/p&gt;&lt;p&gt;服务端需要对&amp;nbsp;Access-Control-Allow-Origin(权限-控制-允许-来源) 进行设置，如&amp;nbsp;Access-Control-Allow-Origin:* 表示允许所有的来源(这样，服务端的访问限制便取消了)，这时，服务器返回数据时，会将设置的 Access-Control-Allow-Origin 返回，浏览器根据它来判断是否阻止脚本对返回内容的读取。&lt;/p&gt;&lt;p&gt;如此，cors便可以通过客户端与服务端的通信来实现跨域。&lt;/p&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.tuicool.com/articles/mYFjaa&quot; style=&quot;text-decoration: none;&quot;&gt;http://www.tuicool.com/articles/mYFjaa&lt;/a&gt;&lt;span style=&quot;text-decoration: none;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-02-26 00:00:00',1,0,0,1),(13,'2016-03-12 07:25:31','浏览器缓存','&lt;p&gt;&lt;span style=&quot;font-family: 新宋体;&quot;&gt;浏览器缓存，百度百科给出的定义：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);&quot;&gt;浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从&lt;/span&gt;&lt;span style=&quot;color:#333333;font-family:arial, 宋体, sans-serif&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 24px;&quot;&gt;本地磁盘&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);&quot;&gt;显示文档，这样就可以加速页面的阅览。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;查看浏览器缓存：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;ie浏览器在Internet选项中可以查看，Google和Firefox可在浏览器中输入chrome://cache和about://cache可查看&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;浏览器缓存主要有两个分类：彻底缓存：&lt;/span&gt;&lt;span style=&quot;font-family: 新宋体;&quot;&gt;Expires，&lt;/span&gt;&lt;span style=&quot;font-family: 新宋体;&quot;&gt;Cache-Control 和 协商缓存：Last-Modify，Etag&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;Expires 是在web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，无需再次请求&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;比如访问百度时，获取其js文件(输入网址没有该url的访问的话，请按F5)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767265754124.png&quot; title=&quot;1457767265754124.png&quot; alt=&quot;blob.png&quot; width=&quot;652&quot; height=&quot;209&quot; style=&quot;width: 652px; height: 209px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;如图表示在格林威治时间2025年11月24日2点32分49秒之前，浏览器可以直接拿本地缓存使用，无需再次请求&lt;/p&gt;&lt;p&gt;Cache-Control和Expires相似，都是指明当前资源的有效期。不过Cache-Control的选择更多，设置更详细；且同时设置的话，Cache-Control的优先级高于Expires。&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;Cache-Control的值可以是public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age，&lt;/span&gt;&lt;span style=&quot;font-size: large;&quot;&gt;各个消息中的指令含义如下：&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;Public 指示响应可被任何缓存区缓存。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;Private 指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;no-cache 指示请求或响应消息不能缓存，该选项并不是说可以设置”不缓存“，容易望文生义~&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;no-store 用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存，完全不存下來。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;max-age 指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;min-fresh 指示客户机可以接收响应时间小于当前时间加上指定时间的响应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;max-stale 指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767691994307.png&quot; title=&quot;1457767691994307.png&quot; alt=&quot;blob.png&quot; width=&quot;660&quot; height=&quot;292&quot; style=&quot;width: 660px; height: 292px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Last-Modify/If-Modified-Since要配合Cache-Control使用&lt;span style=&quot;font-size:18px&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;Last-Modified：标示这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;If-Modified-Since：当&lt;/span&gt;&lt;span style=&quot;font-size: large;&quot;&gt;（使用Cache-Control标识的max-age发现）&lt;/span&gt;&lt;span style=&quot;font-size: large;&quot;&gt;资源过期时，发现资源具有Last-Modified声明，则再次向web服务器请求时带上头 If-Modified-Since，表示请求时间。web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源又被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省浏览)，告知浏览器继续使用所保存的cache。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767297152267.png&quot; title=&quot;1457767297152267.png&quot; alt=&quot;blob.png&quot; width=&quot;658&quot; height=&quot;184&quot; style=&quot;width: 658px; height: 184px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;Etag/If-None-Match也要配合Cache-Control使用&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;Etag：web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。Apache中，Etag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;If-None-Match：&lt;/span&gt;&lt;span style=&quot;font-size: large;&quot;&gt;（使用Cache-Control标识的max-age发现）&lt;/span&gt;&lt;span style=&quot;font-size: large;&quot;&gt;当资源过期时，发现资源具有Etag声明，则再次向web服务器请求时带上头If-None-Match （Etag的值）。web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767322455378.png&quot; title=&quot;1457767322455378.png&quot; alt=&quot;blob.png&quot; width=&quot;647&quot; height=&quot;163&quot; style=&quot;width: 647px; height: 163px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;Etag和Last-Modify如此相似，那在http1.1中为什么还要加上Etag呢？它主要是为了解决几个问题：&lt;/p&gt;&lt;blockquote style=&quot;margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;1、Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;2、如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size:18px&quot;&gt;3、有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tbody style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;tr style=&quot;padding: 0px; margin: 0px;&quot; class=&quot;firstRow&quot;&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: black;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; color: rgb(229, 51, 51);&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;用户操作&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: black;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; color: rgb(229, 51, 51);&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;Expires/Cache-Control&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: black;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; color: rgb(229, 51, 51);&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;Last-Modified/Etag&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;地址栏回车&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;页面链接跳转&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;新开窗口&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;前进、后退&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;F5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;刷新&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; color: rgb(229, 51, 51);&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;strong style=&quot;padding: 0px; margin: 0px;&quot;&gt;无效(BR重置max-age=0)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248); background: silver;&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;有效&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;Ctrl+F5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;padding: 0px; margin: 0px; font-weight: 600;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;刷新&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; color: rgb(229, 51, 51);&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;strong style=&quot;padding: 0px; margin: 0px;&quot;&gt;无效（重置CC=no-cache）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;td style=&quot;font-family: Tahoma; font-size: 10pt; padding: 1px 2px; margin: 0px; border-color: rgb(248, 248, 248);&quot;&gt;&lt;p style=&quot;margin-top: 8px; margin-bottom: 8px; line-height: 23.3999996185303px; letter-spacing: 0.5px; font-size: 13px; word-wrap: break-word; word-break: break-all; text-indent: 0pt;&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px; color: rgb(229, 51, 51);&quot;&gt;&lt;span style=&quot;padding: 0px; margin: 0px;&quot;&gt;&lt;strong style=&quot;padding: 0px; margin: 0px;&quot;&gt;无效（请求头丢弃该选项）&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;最后得出浏览器请求的流程图&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767441865287.png&quot; title=&quot;1457767441865287.png&quot; alt=&quot;blob.png&quot; width=&quot;613&quot; height=&quot;755&quot; style=&quot;width: 613px; height: 755px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;以上所说的都是原理性的，那么在代码中可以有哪些操作呢？&lt;/p&gt;&lt;p&gt;服务端如下php代码&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767464725568.png&quot; title=&quot;1457767464725568.png&quot; alt=&quot;blob.png&quot; width=&quot;628&quot; height=&quot;175&quot; style=&quot;width: 628px; height: 175px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;客户端访问时&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767476407913.png&quot; title=&quot;1457767476407913.png&quot; alt=&quot;blob.png&quot; width=&quot;619&quot; height=&quot;152&quot; style=&quot;width: 619px; height: 152px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;从中可以看出没有使用缓存。&lt;/p&gt;&lt;p&gt;改变服务端的代码：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767494516633.png&quot; title=&quot;1457767494516633.png&quot; alt=&quot;blob.png&quot; width=&quot;609&quot; height=&quot;124&quot; style=&quot;width: 609px; height: 124px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;在客户端输入第一次访问地址：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160312/1457767504802449.png&quot; title=&quot;1457767504802449.png&quot; alt=&quot;blob.png&quot; width=&quot;606&quot; height=&quot;129&quot; style=&quot;width: 606px; height: 129px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;由图中可看出使用了缓存，再次输入该url访问时(此处不能用F5，需在地址栏回车；因为F5会让浏览器将max-age重置为0)，发现没有网络访问，使用的是本地缓存&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-03-12 00:00:00',1,0,0,1),(14,'2016-03-30 08:17:05','linux编译时内存不够','&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;&quot;&gt;linux编译时报错：virtual memory exhausted: Cannot allocate memory&lt;/span&gt;&lt;/p&gt;&lt;p&gt;因为服务器内存只有1G，解决办法是使用虚拟内存：&lt;/p&gt;&lt;p&gt;dd if=/dev/zero of=/swap bs=1024 count=1M &amp;nbsp; &amp;nbsp;#创建一个大小为1G的文件/swap&lt;/p&gt;&lt;p&gt;mkswap /swap &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; #将/swap作为swap空间&lt;/p&gt;&lt;p&gt;swapon /swap &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; #启用虚拟内存&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160330/1459325787201230.png&quot; title=&quot;1459325787201230.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;然后再进行编译，编译完成后再清理虚拟内存内存&lt;/p&gt;&lt;p&gt;swapoff /swap&lt;/p&gt;&lt;p&gt;rm -rf /swap&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;百科：http://baike.baidu.com/subview/1853679/9321724.htm#viewPageContent&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-03-30 00:00:00',1,0,0,1),(15,'2016-04-11 10:09:13','php和nodejs的一个简单比较','&lt;p&gt;&amp;nbsp;这两天在学习nodejs，用其将博客首页简单的实现了下，发现其作为一门脚本语言，很多方面和php很相似。&lt;/p&gt;&lt;p&gt;&amp;nbsp; 同样的页面，虽然有些框架等的不同造成比较的不公平，但还是想压测看下数据。&lt;/p&gt;&lt;p&gt;&amp;nbsp; php的博客主页(www.lieshow.com)，php版本是7，但用了thinkPHP框架：&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&quot;/ueditor/php/upload/image/20160411/1460368950936313.png&quot; title=&quot;1460368950936313.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; nodejs的主页(node.lieshow.com)，用了express&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;img src=&quot;/ueditor/php/upload/image/20160411/1460369008605122.png&quot; title=&quot;1460369008605122.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; 这个数据因为环境等问题不能准确的反应php7和nodejs的对比，但也能反应出在某些情况下nodejs在并发方面表现得确实比php要好。我想这应该要感谢于nodejs异步的方式，而php的扩展swoole在这方面和他很相似，下次再用swoole来看下。&lt;/p&gt;',0,0,1,'2017-07-19 00:00:00',1,0,0,1),(16,'2016-04-12 02:45:33','str_replace和strtr','&lt;p&gt;&lt;span style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; widows: 2; font-size: medium;&quot;&gt;今天有个bug，发现str_replace的时候，需求是将test替换成&amp;lt;a href=&amp;#39;test&amp;#39;&amp;gt;test&amp;lt;/a&amp;gt;，却将herf中的test进行了再次替换；该问题只是偶现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;网上查了下，发现str_replace是循环替换，简单的解决方式是用strtr函数代替str_replace函数的使用。&lt;/p&gt;&lt;p&gt;他们的比较：http://blog.csdn.net/aidenliu/article/details/5695433&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-04-12 00:00:00',1,0,0,1),(17,'2016-04-28 06:10:27','200 OK (from cache)','&lt;p&gt;今天从阿里云的OSS读取图片，发现自己替换了新图片，但ajax访问显示出来的却是老图片；查看访问情况：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160428/1461823803801470.png&quot; title=&quot;1461823803801470.png&quot; alt=&quot;blob.png&quot; width=&quot;595&quot; height=&quot;330&quot; style=&quot;width: 595px; height: 330px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;发现状态码很奇怪&amp;nbsp; &lt;span style=&quot;color: rgb(128, 128, 128); font-family: Consolas, &amp;#39;Lucida Console&amp;#39;, monospace; font-size: 12px; background-color: rgb(255, 255, 255);&quot;&gt;200&amp;nbsp;OK&amp;nbsp;(from&amp;nbsp;cache)&amp;nbsp;&lt;/span&gt;；查了下，才发现自己孤陋寡闻了，所以记录下来。&lt;/p&gt;&lt;p&gt;之前也有了解过浏览器的缓存(&lt;a href=&quot;http://www.lieshow.com/index/details/id/13&quot;&gt;http://www.lieshow.com/index/details/id/13&lt;/a&gt;)，重新再看下，发现还是自己了解的不够。之前的文章中便有说明缓存分为协商缓存和彻底缓存(或者说强缓存更准确)，但之前了解或测试的情况都是自己在浏览器页面中访问或刷新等，但因为这些都是&lt;strong&gt;用户主动触发的行为，浏览器还是会用协商缓存的方式&lt;/strong&gt;，出现我们常见的304。&lt;/p&gt;&lt;p&gt;而在今天遇到的ajax访问的方式，在Expires或Cache-Control没有过期且命中cache时，浏览器便会采用强缓存的方式，不发生请求，直接拿本地的用。这时候返回的状态码便是&amp;nbsp;200 OK (from cache)&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2016-04-29 00:00:00',1,0,0,1),(18,'2016-05-30 02:45:29','php中的$_REQUEST','&lt;p&gt;今天看到同事写的方法中用到$_REQUEST，且是把$_COOKIE的值赋给$_REQUEST。自己记得$_REQUEST就已经包含$_COOKIE的值了，查了下在线手册(&lt;a href=&quot;http://www.php.net/manual/zh/reserved.variables.request.php&quot;&gt;http://www.php.net/manual/zh/reserved.variables.request.php&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20160530/1464576299451689.png&quot; title=&quot;1464576299451689.png&quot; alt=&quot;blob.png&quot; width=&quot;636&quot; height=&quot;579&quot; style=&quot;width: 636px; height: 579px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;之前看文档，没有注意后面的note，只看了前面的主体文字。&lt;/p&gt;&lt;p&gt;php中$_REQUEST的值是取决于php.ini中variables_order的设置的，而在php5.3.x后，variables_order的默认值就只有GP了，也就是说，$_REQUEST默认情况下只能获取$_GET、$_POST的值了。除非修改php.ini中的配置&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;note:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;request_order：这个配置项设置 PHP 将 GET, POST 和 Cookie 中的哪些添加到 $_REQUEST 中，并且指定了填充时的顺序。如果 request_order 设置为空，则填充的顺序会以 variables_order 配置项中的顺序为准。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;例如，设置为 request_order = &amp;quot;GP&amp;quot; 时，代表 $_REQUEST 将包含 $_GET 和 $_POST 的值，并且当 $_GET 和 $_POST 中的键相同时，$_POST的值将覆盖 $_GET 的值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;variables_order：这个配置项设置在 PHP 脚本启动时，要注册 EGPCS ($_ENV, $_GET，$_POST，$COOKIE，$_SERVER) 中哪几个超全局变量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;例如，如果设置 variables_order = &amp;quot;SP&amp;quot;，那么 PHP 将创建超全局变量 $_SERVER 和 $_POST，但是不会创建 $_ENV, $_GET 和 $_COOKIE。设置为 &amp;quot;&amp;quot;，那么将不会创建超全局变量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2017-02-08 00:00:00',1,0,0,1),(19,'2016-12-21 15:52:14','php执行基本流程','&lt;p&gt;&lt;span style=&quot;font-family: 新宋体;&quot;&gt;php核心分为三个模块：Zend引擎、内核、扩展层&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;Zend引擎负责将php代码转换为操作码(opcode)，然后执行它&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;内核用来处理请求、文件流、错误处理等相关操作&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;扩展层是指php的扩展&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;Zend将php代码转换为opcode的过程：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20161221/1482335447440096.png&quot; title=&quot;1482335447440096.png&quot; alt=&quot;blob.png&quot; width=&quot;622&quot; height=&quot;80&quot; style=&quot;width: 622px; height: 80px;&quot;/&gt;&lt;/p&gt;&lt;blockquote style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2; margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;1.Scanning(Lexing) ,将PHP代码转换为语言片段(Tokens) —— 词法解析&lt;br/&gt;2.Parsing, 将Tokens转换成简单而有意义的表达式 —— 语法解析&lt;br/&gt;3.Compilation, 将表达式编译成Opocdes —— 创建opcode&lt;/span&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;4.Execution, 顺次执行Opcodes，每次一条，从而实现PHP脚本的功能 —— 执行opcode&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;span style=&quot;font-size:18px&quot;&gt;php的基本流程(扩展加载)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;font-family: Tahoma; orphans: 2; text-align: -webkit-auto; white-space: normal; widows: 2; font-size: medium; margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;1、MINIT&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;在这步（包括之前）php引擎会初始化一些公用配置，读取ini文件，加载zend引擎，执行所有模块(扩展)的MINIT方法，然后就长驻在fpm进程中，然后就等待处理请求&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;2、RINIT&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;在每个请求过来之后，会调用所有模块的RINIT进行一些请求内数据的初始化，比如一些超全局变量，一些模块数据初始化等&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;3、执行php&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;然后在这加载php文件，进行词法，语法分析，生成opcode代码，交由zend vm执行, 暂存执行结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;4、RSHUTDOWN&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;在把结果返回给fpm之前，会调用所有模块的RSHUTDOWN模块进行一些数据的回收，zend vm也会关闭打开的数据流，进行内存释放等操作，然后把暂存的执行结果flush输出&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;5、MSHUTDOWN&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;这一阶段在重启fpm时发生，会调用所有模块的MSHUTDOWN,关闭zend引擎等操作&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体&quot;&gt;php7在Parse和Create Opcode之间加上了一个&lt;/span&gt;&lt;span style=&quot;color: rgb(51, 51, 51); font-family: Helvetica, Tahoma, Arial, sans-serif; font-size: 14px; line-height: 24px; widows: 1; background-color: rgb(255, 255, 255);&quot;&gt;AST&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family:新宋体;font-size:18px&quot;&gt;php5之前的话，没有AST，直接从parser就生成了opcodes！就需要借助一些外部的php语法解析器来实现；而php7增加了AST，我们可以自己去实现这样一个扩展，利用扩展提供的函数可以直接获取文件对应的的AST结构，而这样的结构正是我们可以识别的，所以就可以在这个基础上去做一些优化和判断了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;img src=&quot;/ueditor/php/upload/image/20161221/1482335407866328.png&quot; title=&quot;1482335407866328.png&quot; alt=&quot;blob.png&quot; width=&quot;616&quot; height=&quot;326&quot; style=&quot;width: 616px; height: 326px;&quot;/&gt;&lt;/p&gt;',0,0,1,'2016-12-21 00:00:00',1,0,0,1),(20,'2016-12-28 02:05:59','test','&lt;p&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; class=&quot;edui-faked-video&quot; pluginspage=&quot;http://www.macromedia.com/go/getflashplayer&quot; src=&quot;http://player.youku.com/player.php/sid/XMTgxMDQ1NTgxNg==/v.swf?f=28981224&amp;from=y1.2-3.2&quot; width=&quot;420&quot; height=&quot;280&quot; wmode=&quot;transparent&quot; play=&quot;true&quot; loop=&quot;false&quot; menu=&quot;false&quot; allowscriptaccess=&quot;never&quot; allowfullscreen=&quot;true&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot; title=&quot;ceshi&quot;&gt;&lt;img src=&quot;/ueditor/php/upload/image/20161228/1482890966118811.png&quot; title=&quot;1482890966118811.png&quot; alt=&quot;default.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;',0,0,1,'2016-12-28 00:00:00',1,0,0,-1),(21,'2017-01-10 07:55:22','一条慢查询的优化','&lt;p&gt;今天查看阿里云的慢查询日志，发现有一条慢sql；&lt;/p&gt;&lt;p&gt;拿到测试数据库执行，发现用时接近2s。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170110/1484034769760596.png&quot; title=&quot;1484034769760596.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;explain查看：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170110/1484034780341859.png&quot; title=&quot;1484034780341859.png&quot; alt=&quot;blob.png&quot; width=&quot;640&quot; height=&quot;221&quot; style=&quot;width: 640px; height: 221px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;mysql选择的驱动表不是第一个，而是数据较少的第二个，没用到索引且耗时长&lt;/p&gt;&lt;p&gt;使用straight_left强制表的读顺序(学习参考：&lt;a href=&quot;http://huoding.com/2013/06/04/261&quot;&gt;http://huoding.com/2013/06/04/261&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;执行时间是快了不少,但仍未用索引，主要是plan_shipping_time的&amp;gt;和&amp;lt;不使用索引&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170110/1484034790841940.png&quot; title=&quot;1484034790841940.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;explain查看：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170110/1484034836741631.png&quot; title=&quot;1484034836741631.png&quot; alt=&quot;blob.png&quot; width=&quot;636&quot; height=&quot;206&quot; style=&quot;width: 636px; height: 206px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;强制使用索引(force index)：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170110/1484034852742168.png&quot; title=&quot;1484034852742168.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;explain查看：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170110/1484034865369990.png&quot; title=&quot;1484034865369990.png&quot; alt=&quot;blob.png&quot; width=&quot;640&quot; height=&quot;231&quot; style=&quot;width: 640px; height: 231px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;这时再用straight_join已经没有必要了：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170110/1484034886902443.png&quot; title=&quot;1484034886902443.png&quot; alt=&quot;blob.png&quot; width=&quot;635&quot; height=&quot;213&quot; style=&quot;width: 635px; height: 213px;&quot;/&gt;&lt;/p&gt;&lt;p&gt;暂时只做sql语句本身的优化。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2017-01-11 00:00:00',1,0,0,1),(22,'2017-02-08 09:51:07','设计模式学习','&lt;p&gt;设计模式是一种比较抽象的概括，写了几年php，自己对设计模式的理解也一直很模糊，时有遗忘，时有混淆，所以特意做点个人笔记。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;单例(Singleton)模式：这应该是php程序员最常见的一种设计模式了，它让系统中使用该模式的类只会被实例化一次，避免了大量的new操作，php中最常见的应用场景是数据库应用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;抽象工厂(Abstract Factory)模式：它是把创建对象的过程封装起来，这样随时可以创建一个对象。比如php连的数据库类有mysql、oracle等，创建一个类，将new数据库类的方法封装在其中，根据传入的参数new不同的类。&lt;/p&gt;&lt;p&gt;参考：&lt;a href=&quot;https://segmentfault.com/q/1010000005849224?_ea=935141&quot;&gt;https://segmentfault.com/q/1010000005849224?_ea=935141&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;观察者(Observer)模式：它是一种一对多的依赖关系，让多个观察者同时监听某一对象，当其发生改变时，会通知所有观察者。vue的数据绑定就是其典型的应用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;适配器(Adapter)模式：它将一个类的接口转换成客户希望的另一个接口，可使原来不兼容而不能一起工作的接口一起工作。&lt;/p&gt;&lt;p&gt;如数据操作有mysql、mysqli、pdo、sqlite、postgresql等，假若生成环境需要更换数据库时，可利用适配器模式统一接口。同理cache的场景也是，这会是更换缓存策略(memcache、redis、apc)更方便。&lt;/p&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.phpddt.com/php/design-adapter.html&quot;&gt;http://www.phpddt.com/php/design-adapter.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;装饰者(Decorator)模式：它是对一个已有的结构增加装饰，在不必改变原有结构和继承的情况下，动态的扩展一个对象的功能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;策略(Strategy)模式：它针对一组算法，将每一个算法封装到具有共同接口的独立类中，使它们可以互相替换。&lt;/p&gt;&lt;p&gt;如购物车系统，在给商品计算总价的时候，普通会员肯定是商品单价乘以数量，但是初级会员提供9折折扣，对中级会员提供8折折扣，对高级会员提供7折折扣，这种场景就可以使用策略模式实现。定义一个抽象策略类及一个计算价格的方法computePrice，再定义普通、初级、中级、高级4个具体策略类并分别实现计算价格的方法computePrice。再定义一个环境角色实现类并实现价格计算compute，其根据不同的参数调用不同具体策略类的computePrice方法。&lt;/p&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.phpddt.com/php/strategy.html&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.phpddt.com/php/strategy.html&quot;&gt;http://www.phpddt.com/php/strategy.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;代理(Proxy)模式：它是在客户端和实体之间建立一个代理对象，客户端对实体进行的操作全部委派给代理对象。如在用户登录时, 真正的登录类和代理登录类都实现了Login接口, 不同的是Proxy类的方法中增加了用户是否合法的判断, 只有合法时才去调用真正登录类的login方法. 用户访问的其实是Proxy的login方法。&lt;/p&gt;&lt;p&gt;数据库主从，通过代理设置主从读写设置。定义接口和读、写两个方法；定义操作实现代理类，分别实现读、写两个方法，其中设置读从库，写主库。&lt;/p&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.cnblogs.com/onephp/p/6109491.html&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.cnblogs.com/onephp/p/6109491.html&quot;&gt;http://www.cnblogs.com/onephp/p/6109491.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;外观(Facade)模式：又称门面模式，是为子系统中的接口提供一个一致性的界面。或者说就是以一种简单的方式调用复杂的系统来完成一件事。简单说是程序要实现一系列复杂的操作，且公用性较强，这时便封装一个类或方法来实现这些复杂的操作。&lt;/p&gt;&lt;p&gt;如一个User类，里面有get、set用户信息的方法(姓名、年龄、住址、体重等等)，正常情况下，调用getUser获取用户信息之前，先要调用各个set方法设置用户信息，如果信息很多、经常变化的话，维护成本将很大。这时可以设置一个外观类，里面定义一个静态方法getUserCall，这个方法通过传参实现设置和返回用户信息。&lt;/p&gt;&lt;p&gt;参考：&lt;a href=&quot;https://my.oschina.net/shyl/blog/532119&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://my.oschina.net/shyl/blog/532119&quot;&gt;https://my.oschina.net/shyl/blog/532119&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;建造者(Builder)模式：又称生产者模式，它是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。同样是封装，和外观模式有些相似，可以用同一个例子来说明，但又有明显不同：建造者模式的目的是希望用同样的生成过程，根据不同的生产者得到不同的产品，而外观模式则是将多个对象组合起来，不需要生成者，也 不需要得到不同的结果。&lt;/p&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.2cto.com/kf/201409/333924.html&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.2cto.com/kf/201409/333924.html&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.2cto.com/kf/201409/333924.html&quot;&gt;http://www.2cto.com/kf/201409/333924.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;——————————— 待补充 ——————————&lt;/p&gt;',0,0,1,'2017-02-08 00:00:00',1,0,0,1),(23,'2017-02-09 07:51:48','CAS实现单点登录(SSO)','&lt;p&gt;单点登录（Single Sign-On , 简称 SSO）是目前比较流行的服务于企业业务整合的解决方案之一， SSO 使得在多个应用系统中，用户只需要登录一次 就可以访问所有相互信任的应用系统。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;CAS（Central Authentication Service）是耶鲁大学开发的单点登录系统。&lt;/p&gt;&lt;p&gt;CAS的原理是一个COOKIE+N个SESSION。它分为两层，CAS Server和CAS Client。CAS Server负责完成对用户的验证工作，需要独立部署，它会处理用户名、密码等凭证。CAS Client负责处理对客户端受保护资源的处理请求，需要对请求方进行身份认证时，重定向到CAS Server进行认证。CAS Client 与受保护的客户端应用部署在一起，以 Filter 方式保护受保护的资源。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;登录处理：&lt;/p&gt;&lt;p&gt;1、用户访问站点A上受保护的资源，CAS Client判断是否有session，如无则再判断其COOKIE中是否有TGC（ticket-granting cookie），如果没有，则重定向CAS Server（附带用户要访问的资源地址）。&lt;/p&gt;&lt;p&gt;2、CAS Server验证用户输入的账号密码是否正确。验证通过则随机生成一个相当长度、唯一的ticket，并为浏览器设置一个TGC（一个加密的cookie，保存用户的登录信息，该cookie只要浏览器关闭，则自动过期），并重定向到CAS Client上 用户要访问的资源地址（附带刚产生的ticket）。&lt;/p&gt;&lt;p&gt;3、CAS Client拿着用户要访问的资源地址和ticket去CAS Server进行验证，CAS Server验证通过则返回用户信息，并将这个ticket作废。&lt;/p&gt;&lt;p&gt;4、验证通过后CAS Client创建session，至此用户在站点A上登录完成。&lt;/p&gt;&lt;p&gt;5、用户访问站点B上受保护的资源，CAS Client判断是否有session，如无则再判断其COOKIE中是否有TGC（此时应该有），CAS Client拿着TGC重定向到CAS Server。&lt;/p&gt;&lt;p&gt;6、CAS Server验证TGC，正确则生成ticket并重定向到CAS Client上用户要访问的资源地址。&lt;/p&gt;&lt;p&gt;7、重复步骤3、4。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;退出处理：&lt;/p&gt;&lt;p&gt;1、CAS Server收到退出请求，检查cookie中的TGC，把对应的session清楚掉，并找到所有通过TGC单点登录的应用服务器的退出回调url（附带session ID）。&lt;/p&gt;&lt;p&gt;2、所有收到退出回调的应用服务器根据session ID做退出处理。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;网上的两个图，帮助理解：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170209/1486626686796786.png&quot; title=&quot;1486626686796786.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/ueditor/php/upload/image/20170209/1486626704689302.png&quot; title=&quot;1486626704689302.png&quot; alt=&quot;blob.png&quot;/&gt;&lt;/p&gt;',0,0,1,'2017-02-09 00:00:00',1,0,0,1),(24,'2017-07-03 09:40:53','ipv6环境搭建','&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;这两天在弄ios app的上架，初次提交审核，苹果测试时直接访问不了，网上查下资料，大体是ipv6的原因。&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;服务器ipv6的环境的处理其实挺简单，网上挺多资料的，但想着这个东西花了自己两天时间，便也记录下来。&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;参考资料：&lt;a href=&quot;http://it.10yan.com/blog/zb_users/upload/2016/10/201610101476065711232757.pdf&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://it.10yan.com/blog/zb_users/upload/2016/10/201610101476065711232757.pdf&quot;&gt;http://it.10yan.com/blog/zb_users/upload/2016/10/201610101476065711232757.pdf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;a href=&quot;http://blog.csdn.net/jiakg/article/details/69049984&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://blog.csdn.net/jiakg/article/details/69049984&quot;&gt;http://blog.csdn.net/jiakg/article/details/69049984&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;测试直通：&lt;a href=&quot;http://ipv6-test.com/validate.php&quot;&gt;http://ipv6-test.com/validate.php&lt;/a&gt; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;服务器是阿里云的，centos7，按照文章的方式搭建很快就搭好了。&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;但遇到了一个问题，过一段时间之后（具体时长未测，半个小时左右吧），再来ping6该搭好的服务器就不通了，这时候在服务器上ping6下ipv6.google.com或其他的ipv6地址，就又能够正常ping6通了；&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;该问题暂未找到原因，如有知道的可联系我：lieshow312@sina.com&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2017-07-03 00:00:00',1,0,0,1),(25,'2017-07-19 04:40:31','mysql慢查询','&lt;p&gt;在&amp;nbsp;[mysqld] 下添加如下配置（mysql版本为5.6）&lt;/p&gt;&lt;p&gt;slow_query_log=1&lt;/p&gt;&lt;p&gt;slow-query-log-file = /var/log/slow_query.log&lt;/p&gt;&lt;p&gt;long_query_time=1&lt;/p&gt;&lt;p&gt;log-queries-not-using-indexes &amp;nbsp; &amp;nbsp; #查看没有使用索引的查询&lt;/p&gt;&lt;p&gt;log-slow-admin-statements &amp;nbsp; &amp;nbsp; #记录管理型慢sql&lt;/p&gt;&lt;p&gt;然后重启mysql即可。此时slow_query会记录sql语句及其执行时间、耗时、索引情况、行数等信息。&lt;/p&gt;&lt;p&gt;slow_query.log里记录的文件会比较多，可用mysql自带的工具mysqldumpslow来分析，它能列出模糊查询、按执行时长等排序的部分数据等等，具体参数可使用--help查看。也可使用explain命令来分析语句。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2017-07-19 00:00:00',1,0,0,1),(26,'2017-07-26 07:32:18','斐波那契数列','&lt;p&gt;被人问到个问题，斐波那契数列（1、1、2、3、5、8 ...）；即从第三个数开始，每个数是前两个数之和，给出的算法如下：&lt;/p&gt;&lt;p&gt;function fib($n) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; if ($n==0 || $n==1) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return fib($n-1) + fib($n-2);&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;问题：该实现方式有什么缺点，优化它并仍然用递归的方式实现。&lt;/p&gt;&lt;p&gt;要弄懂这个函数的缺点，首先要弄懂php调用函数的方式：php每调用一个函数，会在函数的栈区（内存的存储区域）形成一个函数的执行空间。&lt;/p&gt;&lt;p&gt;那递归函数就有一个比较常见的缺点了：递归调用的函数，每一个调用都会开辟一个内存空间，每一个调用都有一个单独的作用域，且局部变量也不会共享。&lt;/p&gt;&lt;p&gt;对于斐波那契数列，其实较好的方式就是用循环：&lt;/p&gt;&lt;p&gt;function fib($n) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; $data = [1,1];&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; for ($i=2; $i&amp;lt;=$n; $i++) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $data[$i] = $data[$i-1] + $data[$i-2];&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return $data[$n];&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;但是题目要求是任然用递归；针对递归函数的缺点，其实把方法放到一个类里，并设置成static也是一种方案。&lt;/p&gt;&lt;p&gt;另外用匿名函数，然后引用也是一种方式：&lt;/p&gt;&lt;p&gt;function fib($n) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; $fib = function ($n) use (&amp;amp;$fib) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if ($n==0 || $n==1) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 1;&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return $fib($n-1) + $fib($n-2);&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; };&lt;/p&gt;&lt;p&gt;&amp;nbsp; &amp;nbsp; return $fib($n);&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2017-07-26 00:00:00',1,0,0,1),(27,'2017-07-31 09:38:34','redis缓存','&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;之前使用redis来缓存热数据，方案如下：查询数据时，根据key值判断redis中是否有数据，如果没有，则到mysql进行查询，将查到的结果进行json_encode，以key-value的方式存储一段时间，并返回数据；如果redis中有，则从缓存中拿去数据json_decode后返回。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;由于之前数据量小，居然也没有遇到什么问题。导致后来别人问缓存穿透、雪崩等问题怎么解决的时候一脸懵，今天特地稍作整理，完善下之前的方案。&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;相比memcache，redis的一个显著优势便是支持的数据类型更多，其中便有一个是hash。存储数据时可以根据业务考虑该方式，这样就不需要进行序列化，取数据时也不用取所有，可以取单个属性。（eg：存储用户数据时，键值是用户id，hash中存储用户名称、年龄、邮箱、生日等等）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;考虑情况及解决思路：&lt;/p&gt;&lt;p&gt;缓存穿透：&lt;/p&gt;&lt;p&gt;查询数据时，如果缓存中没有该key，就会去数据库中查询；如果我们查询的key一直不存在（被攻击等情况），就会一直去查数据。&lt;/p&gt;&lt;p&gt;解决思路：数据不存在时，也设置该缓存，只不过value设置为null或特殊字符串；用布隆过滤器的方式过滤所有的缓存，拦截不存在的缓存。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;缓存并发：&lt;/p&gt;&lt;p&gt;并发较高的情况下，大量请求同一个数据，此时缓存失效，造成多个进程同时访问数据库造成压力并频繁更新缓存。&lt;/p&gt;&lt;p&gt;解决思路：类似加锁的方式，到数据库查询之前，用setNX（将key的值设为value，当且仅当key不存在）设置一个值，成功则到数据库查询返回并更新缓存，设置失败则sleep下，唤醒后再继续从缓存读取数据。设置缓存失败则将其放入消息队列中，消息队列过滤掉相同的key，并通过连接判断redis服务是否正常，正常时则跑队列更新缓存。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;缓存失效：&lt;/p&gt;&lt;p&gt;设置缓存的过期时间，高并发的时候，同时设置了一些缓存，这些缓存会同时失效，请求全部转到数据库，造成压力过重。&lt;/p&gt;&lt;p&gt;解决思路：设置过期时间时，在计划的时间加上一个随机时间。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;缓存雪崩：&lt;/p&gt;&lt;p&gt;数据未更新到缓存中或缓存同一时间大面积失效，导致都去查数据库，造成数据库负载过高。&lt;/p&gt;&lt;p&gt;解决思路：用队列的方式去数据库中查询数据，但会降低系统的吞吐量；redis做主备；&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;缓存清空（当redis缓存达到配置文件中配置的最大内存时），常见的缓存清空策略如下：&lt;/p&gt;&lt;p&gt;FIFO(first in first out)：&lt;/p&gt;&lt;p&gt;先进先出策略，最先进入缓存的数据在缓存空间不够的情况下（超出最大元素限制）会被优先被清除掉，以腾出新的空间接受新的数据。策略算法主要比较缓存元素的创建时间。在数据实效性要求场景下可选择该类策略，优先保障最新数据可用。&lt;/p&gt;&lt;p&gt;LFU(less frequently used)：&lt;/p&gt;&lt;p&gt;最少使用策略，无论是否过期，根据元素的被使用次数判断，清除使用次数较少的元素释放空间。策略算法主要比较元素的hitCount（命中次数）。在保证高频数据有效性场景下，可选择这类策略。&lt;/p&gt;&lt;p&gt;LRU(least recently used)：&lt;/p&gt;&lt;p&gt;最近最少使用策略，无论是否过期，根据元素最后一次被使用的时间戳，清除最远使用时间戳的元素释放空间。策略算法主要比较元素最近一次被get使用时间。在热点数据场景下较适用，优先保证热点数据的有效性。&lt;/p&gt;&lt;p&gt;其他：&lt;/p&gt;&lt;p&gt;根据过期时间判断，清理过期时间最长的元素；根据过期时间判断，清理最近要过期的元素；随机清理；根据关键字（或元素内容）长短清理等。&lt;/p&gt;',0,0,1,'2017-07-31 00:00:00',1,0,0,1),(28,'2017-08-02 08:48:52','iconv转码问题','&lt;p&gt;业务需要将UTF-8转为Unicode编码，在网上找了个函数：&lt;/p&gt;&lt;p&gt;function utf8ToUnicode($data)&lt;/p&gt;&lt;p&gt;{&lt;/p&gt;&lt;p&gt;&amp;nbsp; $data = iconv(&amp;#39;UTF-8&amp;#39;, &amp;#39;UCS-2&amp;#39;, $data);&lt;/p&gt;&lt;p&gt;&amp;nbsp; $len = strlen($data);&lt;/p&gt;&lt;p&gt;&amp;nbsp; $str = &amp;#39;&amp;#39;;&lt;/p&gt;&lt;p&gt;&amp;nbsp; for ($i = 0; $i &amp;lt; $len - 1; $i = $i + 2) {&lt;/p&gt;&lt;p&gt;&amp;nbsp; $c = $data[$i];&lt;/p&gt;&lt;p&gt;&amp;nbsp; $c2 = $data[$i + 1];&lt;/p&gt;&lt;p&gt;&amp;nbsp; if (ord($c) &amp;gt; 0) { //两个字节的文字&lt;/p&gt;&lt;p&gt;&amp;nbsp; $str .= &amp;#39;\\u&amp;#39;.base_convert(ord($c), 10, 16).str_pad(base_convert(ord($c2), 10, 16), 2, 0, STR_PAD_LEFT);&lt;/p&gt;&lt;p&gt;// $str .= &amp;#39;\\u&amp;#39;.str_pad(base_convert(ord($c2), 10, 16), 2, 0, STR_PAD_LEFT).str_pad(base_convert(ord($c), 10, 16), 2, 0, STR_PAD_LEFT);&lt;/p&gt;&lt;p&gt;&amp;nbsp; } else {&lt;/p&gt;&lt;p&gt;&amp;nbsp; $str .= &amp;#39;\\u&amp;#39;.str_pad(base_convert(ord($c2), 10, 16), 4, 0, STR_PAD_LEFT);&lt;/p&gt;&lt;p&gt;// $str .= &amp;#39;\\u&amp;#39;.base_convert(ord($c), 10, 16).str_pad(base_convert(ord($c2), 10, 16), 2, 0, STR_PAD_LEFT);&lt;/p&gt;&lt;p&gt;&amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; }&lt;/p&gt;&lt;p&gt;&amp;nbsp; $str = strtolower($str); //转换为小写&lt;/p&gt;&lt;p&gt;&amp;nbsp; return $str;&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;在测试环境能正常运行，但到开发环境便有问题，转码需要换成被注释掉的代码。&lt;/p&gt;&lt;p&gt;最简单的解决方式就是将iconv函数换成mb_convert_encoding函数（mb_convert_encoding 效率会慢点）。&lt;/p&gt;&lt;p&gt;而iconv出现这种情况是因为Linux有两个库提供iconv函数，一个是glibc，另一个是libiconv。&lt;/p&gt;&lt;p&gt;需要看服务器是否支持以及php使用的是哪个（可用phpinfo页面或用命令行php -i|grep iconv查看）&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;',0,0,1,'2017-08-03 00:00:00',1,0,0,1);
/*!40000 ALTER TABLE `blog_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_article_cat`
--

DROP TABLE IF EXISTS `blog_article_cat`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_article_cat` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `adate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `parent_id` int(10) NOT NULL DEFAULT '0' COMMENT '父类id',
  `name` varchar(20) COLLATE utf8_unicode_ci NOT NULL COMMENT '类名',
  `desc` varchar(200) COLLATE utf8_unicode_ci NOT NULL COMMENT '描述',
  `sort_id` int(10) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态:-1=>删除;0=>待审核;1=>正常',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_article_cat`
--

LOCK TABLES `blog_article_cat` WRITE;
/*!40000 ALTER TABLE `blog_article_cat` DISABLE KEYS */;
INSERT INTO `blog_article_cat` VALUES (1,'2016-01-19 02:58:12',0,'php','php',0,1);
/*!40000 ALTER TABLE `blog_article_cat` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `blog_user`
--

DROP TABLE IF EXISTS `blog_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_user` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `adate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `account_number` varchar(20) COLLATE utf8_unicode_ci NOT NULL COMMENT '账号',
  `password` varchar(50) COLLATE utf8_unicode_ci NOT NULL COMMENT '密码',
  `nickname` varchar(20) COLLATE utf8_unicode_ci NOT NULL COMMENT '昵称',
  `email` varchar(50) COLLATE utf8_unicode_ci NOT NULL COMMENT '邮箱',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '状态:-1=>删除;0=>待审核;1=>正常',
  PRIMARY KEY (`id`),
  KEY `account_number` (`account_number`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `blog_user`
--

LOCK TABLES `blog_user` WRITE;
/*!40000 ALTER TABLE `blog_user` DISABLE KEYS */;
INSERT INTO `blog_user` VALUES (1,'2015-12-05 06:44:07','kary','492aa024c579f1383e27b676cde6204f','kary','530219765@qq.com',1);
/*!40000 ALTER TABLE `blog_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `test`
--

DROP TABLE IF EXISTS `test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `test` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `title` varchar(30) CHARACTER SET latin1 NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `test`
--

LOCK TABLES `test` WRITE;
/*!40000 ALTER TABLE `test` DISABLE KEYS */;
/*!40000 ALTER TABLE `test` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-08-17 17:53:21
